/*! Generated by redux-scfld not for editing */
'use strict';


import {
    STATUS_PROCESS,
    STATUS_SUCCESS,
    STATUS_FAILURE,
    // Namespaces
    NAMESPACE_GLOBAL,
    NAMESPACE_OPTIONS,
    NAMESPACE_RESOLVER,
    NAMESPACE_TOTEMS,
    // Types
    GLOBAL_BLOCK_INPUT,
    OPTIONS_DISPLAY,
    OPTIONS_SET,
    RESOLVER_DONE,
    RESOLVER_SET_PROGRESS,
    RESOLVER_START,
    TOTEMS_FLIP_ONE,
    TOTEMS_FLIP,
    TOTEMS_REPLACE,
    TOTEMS_RESET,
    TOTEMS_SOLVE
} from './../types';

import globalBlockInputAction from './global/block-input.js';
import optionsDisplayAction from './options/display.js';
import optionsSetAction from './options/set.js';
import resolverDoneAction from './resolver/done.js';
import resolverSetProgressAction from './resolver/set-progress.js';
import resolverStartAction from './resolver/start.js';
import totemsFlipOneAction from './totems/flip-one.js';
import totemsFlipAction from './totems/flip.js';
import totemsReplaceAction from './totems/replace.js';
import totemsResetAction from './totems/reset.js';
import totemsSolveAction from './totems/solve.js';

function _createProcess(namespace, type, ...args) {
    return {
        namespace,
        type,
        status: STATUS_PROCESS,
        args
    };
}
function _createSuccess(namespace, type, result) {
    return {
        namespace,
        type,
        status: STATUS_SUCCESS,
        result
    };
}
function _createFailure(namespace, type, error, args) {
    return {
        namespace,
        type,
        status: STATUS_FAILURE,
        args,
        error
    };
}

function _createAction(namespace, type, action) {
    return (...args) => {
        return (dispatch, getState) => {
            dispatch(_createProcess(namespace, type, ...args));
            return new Promise( resolve => resolve(action(getState, ...args)) )
                .then(result => dispatch(_createSuccess(namespace, type, result)))
                .catch(error => dispatch(_createFailure(namespace, type, error, args)));
        }
    }
}

export const globalBlockInput = _createAction(NAMESPACE_GLOBAL, GLOBAL_BLOCK_INPUT, globalBlockInputAction);

export const optionsDisplay = _createAction(NAMESPACE_OPTIONS, OPTIONS_DISPLAY, optionsDisplayAction);

export const optionsSet = _createAction(NAMESPACE_OPTIONS, OPTIONS_SET, optionsSetAction);

export const resolverDone = _createAction(NAMESPACE_RESOLVER, RESOLVER_DONE, resolverDoneAction);

export const resolverSetProgress = _createAction(NAMESPACE_RESOLVER, RESOLVER_SET_PROGRESS, resolverSetProgressAction);

export const resolverStart = _createAction(NAMESPACE_RESOLVER, RESOLVER_START, resolverStartAction);

export const totemsFlipOne = _createAction(NAMESPACE_TOTEMS, TOTEMS_FLIP_ONE, totemsFlipOneAction);

export const totemsFlip = _createAction(NAMESPACE_TOTEMS, TOTEMS_FLIP, totemsFlipAction);

export const totemsReplace = _createAction(NAMESPACE_TOTEMS, TOTEMS_REPLACE, totemsReplaceAction);

export const totemsReset = _createAction(NAMESPACE_TOTEMS, TOTEMS_RESET, totemsResetAction);

export const totemsSolve = _createAction(NAMESPACE_TOTEMS, TOTEMS_SOLVE, totemsSolveAction);

